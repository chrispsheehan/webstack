---
const certifications = [
  {
    href: "https://www.credly.com/badges/b12a2630-eee0-44b0-9b15-a4006b1c36f8/public_url",
    src: "/assets/certs/aws-certified-developer-associate.png",
    alt: "AWS Certified Developer Associate",
  },
  {
    href: "https://www.credly.com/badges/6079e7e6-a810-420e-ac57-5ad8eefb1c27/public_url",
    src: "/assets/certs/ckad-certified-kubernetes-application-developer.png",
    alt: "CKAD Certified Kubernetes Application Developer",
  },
  {
    href: "https://www.credly.com/badges/1a613823-2c00-406d-8ce6-be87ac840106/public_url",
    src: "/assets/certs/hashicorp-certified-terraform-associate-003.png",
    alt: "HashiCorp Certified: Terraform Associate",
  },
  {
    href: "https://www.credly.com/badges/3e27ad47-17d2-4706-aba5-9b222aa749b6/public_url",
    src: "/assets/certs/aws-certified-cloud-practitioner.png",
    alt: "AWS Certified Cloud Practitioner",
  },
  {
    href: "https://www.credly.com/badges/10fbcc79-6211-4cca-9bbb-7e240fc1c4c8/public_url",
    src: "/assets/certs/github-actions-certification-program.png",
    alt: "GitHub Actions Certification Program",
  },
];
---

<style>
  .cert-row-wrapper {
    position: relative;
    width: 100%;
    margin: 2rem 0;
    display: flex;
    justify-content: center;
  }

  .cert-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: #1976d2;
    border: none;
    border-radius: 50%;
    width: 2.6rem;
    height: 2.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 1;
    z-index: 2;
    box-shadow: 0 2px 8px rgba(0,0,0,0.12);
    transition: opacity 0.2s, background 0.2s;
    padding: 0;
    outline: none;
    border: 2px solid #fff;
  }
  .cert-arrow[hidden] {
    opacity: 0;
    pointer-events: none;
  }
  .cert-arrow.left {
    left: 0;
    /* small offset for mobile */
    margin-left: 0.2rem;
  }
  .cert-arrow.right {
    right: 0;
    margin-right: 0.2rem;
  }
  .cert-arrow:active, .cert-arrow:focus {
    background: #1250a6;
  }
  .cert-arrow .arrow-chev {
    display: block;
    width: 1.2rem;
    height: 1.2rem;
    border: solid #fff;
    border-width: 0 0.3rem 0.3rem 0;
    padding: 0.2rem;
    border-radius: 2px;
    transition: border-color 0.2s;
  }
  .cert-arrow.left .arrow-chev {
    transform: rotate(135deg);
  }
  .cert-arrow.right .arrow-chev {
    transform: rotate(-45deg);
  }

  .cert-scroller {
    overflow-x: hidden;
    overflow-y: hidden;
    scroll-behavior: smooth;
    width: 100%;
    max-width: 900px;
    -webkit-overflow-scrolling: touch;
    transition: overflow-x 0.3s ease;
    cursor: grab;
  }

  .cert-track {
    display: flex;
    gap: 2rem;
    width: max-content;
    padding: 1rem 0;
  }

  .cert-track a {
    flex: 0 0 auto;
  }

  .cert-track img {
    max-height: 100px;
    height: auto;
    display: block;
    border-radius: 0.5rem;
    background: #fff;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    transition: box-shadow 0.2s, transform 0.2s;
  }
  .cert-track img.b:hover {
    box-shadow: 0 4px 16px rgba(0,0,0,0.12);
    transform: scale(1.05);
  }
  .no-scroll {
    overflow: hidden !important;
    justify-content: center;
    cursor: default;
  }

  @media (max-width: 600px) {
    .cert-track img {
      max-height: 60px;
    }
    .cert-row-wrapper {
      margin: 1rem 0;
    }
    .cert-arrow {
      width: 2rem;
      height: 2rem;
    }
    .cert-scroller {
      max-width: 100vw;
    }
  }
</style>

<section>
  <h2>About Me</h2>
  <h3>
    Hi, I’m Chris — a Senior Platform Engineer focused on making it easier for
    teams to ship code.
  </h3>
  <p>
    I build CI/CD pipelines, manage cloud infrastructure, and create tools that
    improve developer experience.
  </p>
  <p>
    I’m big on automation, observability, and helping teams move fast without
    breaking things.
  </p>

  <h3>Certifications</h3>

  <div class="cert-row-wrapper">
    <button class="cert-arrow left" id="certLeft" aria-label="Scroll left" hidden>
      <span class="arrow-chev"></span>
    </button>
    <div class="cert-scroller" id="certScroller">
      <div class="cert-track" id="certTrack">
        {
          certifications.map((cert) => (
            <a href={cert.href} target="_blank" rel="noopener noreferrer">
              <img src={cert.src} alt={cert.alt} class="b" />
            </a>
          ))
        }
      </div>
    </div>
    <button class="cert-arrow right" id="certRight" aria-label="Scroll right" hidden>
      <span class="arrow-chev"></span>
    </button>
  </div>
</section>

<script type="module">
  const scroller = document.getElementById("certScroller");
  const track = document.getElementById("certTrack");
  const leftBtn = document.getElementById("certLeft");
  const rightBtn = document.getElementById("certRight");

  function updateArrows() {
    // Only show arrows if scrolling is possible
    const canScroll = track.scrollWidth > scroller.clientWidth + 5;
    if (!canScroll) {
      leftBtn.hidden = true;
      rightBtn.hidden = true;
      scroller.classList.add("no-scroll");
      return;
    }
    scroller.classList.remove("no-scroll");
    leftBtn.hidden = scroller.scrollLeft <= 5;
    rightBtn.hidden = scroller.scrollLeft + scroller.clientWidth >= track.scrollWidth - 5;
  }

  function scrollByOffset(offset) {
    scroller.scrollBy({ left: offset, behavior: "smooth" });
  }

  leftBtn.addEventListener("click", () => scrollByOffset(-200));
  rightBtn.addEventListener("click", () => scrollByOffset(200));
  scroller.addEventListener("scroll", updateArrows);
  window.addEventListener("resize", updateArrows);

  // Drag-to-scroll for desktop users
  let isDown = false;
  let startX;
  let scrollLeft;
  scroller.addEventListener('mousedown', (e) => {
    if (track.scrollWidth <= scroller.clientWidth) return;
    isDown = true;
    scroller.classList.add('active');
    startX = e.pageX - scroller.offsetLeft;
    scrollLeft = scroller.scrollLeft;
  });
  scroller.addEventListener('mouseleave', () => {
    isDown = false;
    scroller.classList.remove('active');
  });
  scroller.addEventListener('mouseup', () => {
    isDown = false;
    scroller.classList.remove('active');
  });
  scroller.addEventListener('mousemove', (e) => {
    if(!isDown) return;
    e.preventDefault();
    const x = e.pageX - scroller.offsetLeft;
    const walk = (x - startX) * 1.5;
    scroller.scrollLeft = scrollLeft - walk;
  });

  // On load, check if scroll is needed and show arrows if so
  window.addEventListener("load", updateArrows);
</script>
