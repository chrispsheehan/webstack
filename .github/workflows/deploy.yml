on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      version:
        required: true
        type: string

concurrency: # only run one instance of workflow at any one time
  group: ${{ github.workflow }}-${{inputs.environment}}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write

env:
  TF_VAR_deploy_version: ${{ inputs.version }}

jobs:
  oidc:
    environment:
      name: dev # specify environment - seen at /settings/environments/ in UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - uses: chrispsheehan/terragrunt-aws-oidc-action@0.2.0
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }} # taken from /settings/environments/ 'Environment variables'
          tg_directory: infra/live/${{inputs.environment}}/aws/oidc

  backend:
    environment:
      name: ${{ inputs.environment }}
    needs:
      - oidc
    runs-on: ubuntu-latest
    outputs:
      lambda_cost_explorer_name: ${{ steps.get_jobs_vars.outputs.lambda_cost_explorer_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - name: Check Lambda version exists
        uses: chrispsheehan/just-aws-oidc-action@0.1.1
        env:
          BUCKET_NAME: ${{ vars.LAMBDA_S3_BUCKET }}
          VERSION: ${{ inputs.version }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          just_action: check-version

      - name: Deploy jobs
        uses: chrispsheehan/terragrunt-aws-oidc-action@0.2.0
        id: jobs_action
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          tg_directory: infra/live/${{inputs.environment}}/aws/jobs

      - name: Get jobs function names
        id: get_jobs_vars
        env:
          TG_OUTPUTS: ${{ steps.jobs_action.outputs.tg_outputs  }}
        run: |
          echo "lambda_cost_explorer_name=$(echo $TG_OUTPUTS | jq -r '.lambda_cost_explorer_name.value')" >> $GITHUB_OUTPUT

  frontend:
    environment:
      name: ${{ inputs.environment }}
    needs:
      - backend
    runs-on: ubuntu-latest
    outputs:
      domain: ${{ steps.get_vars.outputs.domain }}
      distribution_id: ${{ steps.get_vars.outputs.distribution_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - name: Check Web version exists
        uses: chrispsheehan/just-aws-oidc-action@0.1.1
        env:
          BUCKET_NAME: ${{ vars.WEB_S3_BUCKET }}
          VERSION: ${{ inputs.version }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          just_action: check-version

      - name: Get initial deployment variable
        id: get-init-deployment
        uses: chrispsheehan/just-aws-oidc-action@0.1.1
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          just_action: get-initial-deploy-var

      - name: Deploy web infrastructure
        uses: chrispsheehan/terragrunt-aws-oidc-action@0.2.0
        id: terragrunt_action
        env:
          TF_VAR_api_invoke_domain: ${{ needs.backend.outputs.api_invoke_domain }}
          TF_VAR_initial_deploy: ${{ steps.get-init-deployment.outputs.just_outputs }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          tg_directory: infra/live/${{inputs.environment}}/aws/website

      - name: Get web bucket name
        id: get_vars
        env:
          TG_OUTPUTS: ${{ steps.terragrunt_action.outputs.tg_outputs  }}
        run: |
          echo "bucket_name=$(echo $TG_OUTPUTS | jq -r '.s3_bucket_name.value')" >> $GITHUB_OUTPUT
          echo "domain=$(echo $TG_OUTPUTS | jq -r '.domain.value')" >> $GITHUB_OUTPUT
          echo "distribution_id=$(echo $TG_OUTPUTS | jq -r '.distribution_id.value')" >> $GITHUB_OUTPUT

  frontend-refresh:
    environment:
      name: ${{ inputs.environment }}
    needs:
      - frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
      - name: Run cloudfront invalidation
        uses: chrispsheehan/just-aws-oidc-action@0.1.1
        env:
          DISTRIBUTION_ID: ${{ needs.frontend.outputs.distribution_id }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          just_action: frontend-refresh


  data-refresh:
    environment:
      name: ${{ inputs.environment }}
    needs:
      - frontend
      - backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
      - name: Trigger cost explorer lambda
        uses: chrispsheehan/just-aws-oidc-action@0.1.1
        env:
          LAMBDA_NAME: ${{ needs.backend.outputs.lambda_cost_explorer_name }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          just_action: lambda-invoke
