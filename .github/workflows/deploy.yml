on:
  workflow_call:
    inputs:
      web_bucket:
        required: true
        type: string
      auth_bucket:
        required: true
        type: string
      api_bucket:
        required: true
        type: string
      environment:
        required: true
        type: string
      version:
        required: true
        type: string

concurrency: # only run one instance of workflow at any one time
  group: ${{ github.workflow }}-${{inputs.environment}}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write

jobs:
  oidc:
    environment:
      name: ${{inputs.environment}} # specify environment - seen at /settings/environments/ in UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/terragrunt_action
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }} # taken from /settings/environments/ 'Environment variables'
          tg_directory: infra/live/${{inputs.environment}}/aws/oidc

  security:
    environment:
      name: ${{inputs.environment}}
    needs: oidc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy security
        uses: ./.github/actions/terragrunt_action
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          tg_directory: infra/live/${{inputs.environment}}/aws/security


  backend:
    environment:
      name: ${{inputs.environment}}
    outputs:
      api_invoke_domain: ${{ steps.get_vars.outputs.api_invoke_domain }}
    needs:
      - security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: extractions/setup-just@v2

      - name: Deploy api
        uses: ./.github/actions/terragrunt_action
        id: api_action
        env:
          TF_VAR_version: ${{ inputs.version }}
          TF_VAR_lambda_bucket: ${{ inputs.api_bucket }}
          TF_VAR_lambda_zip: api.zip
          TF_VAR_auth_lambda_bucket: ${{ inputs.auth_bucket }}
          TF_VAR_auth_lambda_zip: auth.zip
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          tg_directory: infra/live/${{inputs.environment}}/aws/api

      - name: Get API invoke url
        id: get_vars
        env:
          TG_OUTPUTS: ${{ steps.api_action.outputs.tg_outputs  }}
        run: |
          echo "api_invoke_domain=$(echo $TG_OUTPUTS | jq -r '.api_invoke_domain.value')" >> $GITHUB_OUTPUT


  frontend:
    environment:
      name: ${{inputs.environment}}
    needs:
      - security
      - backend
    runs-on: ubuntu-latest
    outputs:
      domain: ${{ steps.get_vars.outputs.domain }}
      distribution_id: ${{ steps.get_vars.outputs.distribution_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Get initial deployment variable
        id: get-init-deployment
        uses: ./.github/actions/just_action
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          just_action: get-initial-deploy-var

      - name: Deploy web infrastructure
        uses: ./.github/actions/terragrunt_action
        id: terragrunt_action
        env:
          TF_VAR_version: ${{ inputs.version }}
          TF_VAR_api_invoke_domain: ${{ needs.backend.outputs.api_invoke_domain }}
          TF_VAR_initial_deploy: ${{ steps.get-init-deployment.outputs.just_outputs }}
          TF_VAR_website_bucket_name: ${{ inputs.web_bucket }}
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          tg_directory: infra/live/${{inputs.environment}}/aws/website

      - name: Get web bucket name
        id: get_vars
        env:
          TG_OUTPUTS: ${{ steps.terragrunt_action.outputs.tg_outputs  }}
        run: |
          echo "bucket_name=$(echo $TG_OUTPUTS | jq -r '.s3_bucket_name.value')" >> $GITHUB_OUTPUT
          echo "domain=$(echo $TG_OUTPUTS | jq -r '.domain.value')" >> $GITHUB_OUTPUT
          echo "distribution_id=$(echo $TG_OUTPUTS | jq -r '.distribution_id.value')" >> $GITHUB_OUTPUT