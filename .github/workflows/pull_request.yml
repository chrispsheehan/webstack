name: Pull Request

on:
  pull_request:
    types:
      [
        opened,
        reopened,
        synchronize,
        review_requested,
        ready_for_review,
        edited,
      ]

jobs:
  check-pr-title:
    runs-on: ubuntu-latest
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
      ALLOWED_PREFIXES: "feat: chore: fix: !feat:"
    steps:
      - name: Fail if PR title does not start with an allowed prefix
        run: |
          echo "PR title: $PR_TITLE"
          for prefix in $ALLOWED_PREFIXES; do
            if [[ "$PR_TITLE" == "$prefix"* ]]; then
              echo "✅ PR title is valid."
              exit 0
            fi
          done
          echo "::error::❌ PR title must start with one of: $ALLOWED_PREFIXES"
          exit 1

  check:
    needs: check-pr-title
    permissions:
      pull-requests: read
      contents: read
    uses: ./.github/workflows/get_changes.yml
    with:
      ref: ${{ github.sha }}
    secrets: inherit

  format-github:
    needs: check
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.github == 'true' }}
    name: Run github formatting checks
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - uses: raven-actions/actionlint@v2
        with:
          shellcheck: false
          pyflakes: false

  format-terragrunt:
    needs: check
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.terragrunt == 'true' }}
    name: Run terragrunt formatting checks
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - uses: hashicorp/setup-terraform@v3
      - uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: 0.45.10

      - name: Terraform fmt check
        run: terraform fmt -check -recursive
        working-directory: infra

      - name: Terragrunt hclfmt check
        run: terragrunt hclfmt --terragrunt-check
        working-directory: infra

  check-terragrunt-lock:
    # needs: format-terragrunt
    runs-on: ubuntu-latest
    # if: ${{ needs.check.outputs.terragrunt == 'true' }}
    name: Run terragrunt formatting checks
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: 0.45.10

      - name: Make script executable
        run: chmod +x ./terragrunt-get-dirs.sh

      - name: Get terragrunt directories
        id: get_dirs
        run: |
          TERRAGRUNT_DIRS=$(./terragrunt-get-dirs.sh)
          echo "Dirs to check: $TERRAGRUNT_DIRS"
          echo "tg_dirs=$(echo $TERRAGRUNT_DIRS)" >> $GITHUB_OUTPUT

      - name: Run init in each Terragrunt directory
        run: |
          for dir in ${{ steps.get_dirs.outputs.tg_dirs }}; do
            echo "Running CLI in $dir"
            terragrunt init -backend=false -chdir="$dir"
          done

  format-frontend:
    needs: check
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.frontend == 'true' }}
    name: Run astro formatting checks
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - name: Run prettier checks
        run: |
          npm install --prefix frontend
          npm run format:check --prefix frontend

  build-frontend:
    needs:
      - check
      - format-frontend
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.frontend == 'true' }}
    name: Run frontend build
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Run frontend build
        run: just frontend-build

  build-backend:
    needs: check
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.backend == 'true' }}
    name: Run backend build
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v3
      - name: Run backend build
        run: just backend-build
